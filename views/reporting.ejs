<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reporting - HVAC System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
</head>
<body>
    <%- include('partials/navbar') %>
    <div class="container-fluid py-4">
        <div class="row">
            <div class="col-12">
                <h1 class="mb-4">
                    <i class="bi bi-file-earmark-text me-2"></i>
                    Device Reporting
                </h1>
                <!-- Filter -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row align-items-end">
                            <div class="col-md-2">
                                <label for="deviceType" class="form-label">Device Type</label>
                                <select id="deviceType" class="form-select" onchange="switchDeviceTabs()">
                                    <option value="motor">Motor</option>
                                    <option value="valve">Valve</option>
                                    <option value="damper">Damper</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label for="datePreset" class="form-label">Quick Select</label>
                                <select class="form-select" id="datePreset" onchange="handleDatePreset()">
                                    <option value="custom">Custom Range</option>
                                    <option value="today">Today</option>
                                    <option value="yesterday">Yesterday</option>
                                    <option value="2days">Last 2 Days</option>
                                    <option value="3days">Last 3 Days</option>
                                    <option value="1week" selected>Last 7 Days</option>
                                    <option value="2weeks">Last 14 Days</option>
                                    <option value="1month">Last 30 Days</option>
                                    <option value="2months">Last 60 Days</option>
                                    <option value="3months">Last 90 Days</option>
                                    <option value="6months">Last 6 Months</option>
                                    <option value="1year">Last 1 Year</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label for="startDate" class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="startDate" value="">
                            </div>
                            <div class="col-md-2">
                                <label for="endDate" class="form-label">End Date</label>
                                <input type="date" class="form-control" id="endDate" value="">
                            </div>
                            <div class="col-md-2">
                                <label for="groupBy" class="form-label">Group By</label>
                                <select class="form-select" id="groupBy">
                                    <option value="day">Daily</option>
                                    <option value="week">Weekly</option>
                                    <option value="month">Monthly</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-primary w-100" onclick="loadReports()">
                                    <i class="bi bi-search me-2"></i>Generate Report
                                </button>
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button id="exportPdfBtn" class="btn btn-danger w-100" disabled>
                                    <i class="bi bi-file-earmark-pdf-fill"></i> Export to PDF
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Motor Tabs -->
                <div id="motorTabs" class="device-tabs">
                    <ul class="nav nav-tabs mb-4" role="tablist" data-bs-smooth-scroll="false">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="motor-daily-tab" data-bs-toggle="tab" data-bs-target="#motor-daily" type="button" role="tab">Daily Runtime</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="motor-comparison-tab" data-bs-toggle="tab" data-bs-target="#motor-comparison" type="button" role="tab">Motor Comparison</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="motor-summary-tab" data-bs-toggle="tab" data-bs-target="#motor-summary" type="button" role="tab">Summary</button>
                        </li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane fade show active" id="motor-daily" role="tabpanel">
                            <div class="card"><div class="card-body"><canvas id="motorDailyChart" height="100"></canvas></div></div>
                        </div>
                        <div class="tab-pane fade" id="motor-comparison" role="tabpanel">
                            <div class="card">
                                <div class="card-body comparison-chart-container">
                                    <canvas id="motorComparisonChart" height="60"></canvas>
                                    <div id="motorComparisonSummary" class="mt-3"></div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="motor-summary" role="tabpanel">
                            <div class="card"><div class="card-body" id="motorSummary"></div></div>
                        </div>
                    </div>
                </div>
                <!-- Valve Tabs -->
                <div id="valveTabs" class="device-tabs" style="display:none">
                    <ul class="nav nav-tabs mb-4" role="tablist" data-bs-smooth-scroll="false">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="valve-daily-tab" data-bs-toggle="tab" data-bs-target="#valve-daily" type="button" role="tab">Daily Open Time</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="valve-comparison-tab" data-bs-toggle="tab" data-bs-target="#valve-comparison" type="button" role="tab">Valve Comparison</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="valve-summary-tab" data-bs-toggle="tab" data-bs-target="#valve-summary" type="button" role="tab">Summary</button>
                        </li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane fade show active" id="valve-daily" role="tabpanel">
                            <div class="card"><div class="card-body"><canvas id="valveDailyChart" height="100"></canvas></div></div>
                        </div>
                        <div class="tab-pane fade" id="valve-comparison" role="tabpanel">
                            <div class="card">
                                <div class="card-body comparison-chart-container">
                                    <canvas id="valveComparisonChart" height="60"></canvas>
                                    <div id="valveComparisonSummary" class="mt-3"></div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="valve-summary" role="tabpanel">
                            <div class="card"><div class="card-body" id="valveSummary"></div></div>
                        </div>
                    </div>
                </div>
                <!-- Damper Tabs -->
                <div id="damperTabs" class="device-tabs" style="display:none">
                    <ul class="nav nav-tabs mb-4" role="tablist" data-bs-smooth-scroll="false">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="damper-daily-tab" data-bs-toggle="tab" data-bs-target="#damper-daily" type="button" role="tab">Daily Open Time</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="damper-comparison-tab" data-bs-toggle="tab" data-bs-target="#damper-comparison" type="button" role="tab">Damper Comparison</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="damper-summary-tab" data-bs-toggle="tab" data-bs-target="#damper-summary" type="button" role="tab">Summary</button>
                        </li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane fade show active" id="damper-daily" role="tabpanel">
                            <div class="card"><div class="card-body"><canvas id="damperDailyChart" height="100"></canvas></div></div>
                        </div>
                        <div class="tab-pane fade" id="damper-comparison" role="tabpanel">
                            <div class="card">
                                <div class="card-body comparison-chart-container">
                                    <canvas id="damperComparisonChart" height="60"></canvas>
                                    <div id="damperComparisonSummary" class="mt-3"></div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="damper-summary" role="tabpanel">
                            <div class="card"><div class="card-body" id="damperSummary"></div></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Pie Charts Section -->
    <div class="row mt-4">
      <div class="col-md-6">
        <div class="card">
          <div class="card-header" style="background-color: #1e2f3d; color:#fff"><b>Current Motor Status Ratio</b></div>
          <div class="card-body">
            <div class="runtime-pie-flex">
              <div class="runtime-pie-chart-container">
                <div id="motorStatusPieTotal" class="pie-total-label"></div>
                <canvas id="motorStatusPieChart" width="220" height="220"></canvas>
              </div>
              <div id="motorStatusPieLegend" class="runtime-pie-legend"></div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="card">
          <div class="card-header" style="background-color: #1e2f3d; color:#fff"><b>Total Runtime Ratio by Device Group</b></div>
          <div class="card-body">
            <div class="runtime-pie-flex">
              <div class="runtime-pie-chart-container">
                <div id="totalRuntimePieTotal" class="pie-total-label"></div>
                <canvas id="totalRuntimePieChart" width="220" height="220"></canvas>
              </div>
              <div id="totalRuntimePieLegend" class="runtime-pie-legend"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        .comparison-chart-container {
            min-height: 320px;
            padding: 1rem;
        }
        .comparison-chart-container canvas {
            max-height: 250px !important;
        }
        .card-body canvas {
            min-height: 300px !important;
        }
        .comparison-chart-container #motorComparisonSummary,
        .comparison-chart-container #valveComparisonSummary,
        .comparison-chart-container #damperComparisonSummary {
            font-size: 0.9rem;
            line-height: 1.4;
        }
        .device-tabs .card-body {
            padding: 1rem;
        }
        
        /* Prevent auto-scroll on tab change */
        .nav-tabs .nav-link {
            scroll-behavior: auto;
        }
        .tab-content {
            scroll-behavior: auto;
        }
        .tab-pane {
            scroll-behavior: auto;
        }
        
        /* Ensure tabs don't cause page jump */
        .nav-tabs {
            scroll-margin-top: 0;
        }
        [data-bs-toggle="tab"] {
            scroll-margin-top: 0;
        }
        .runtime-pie-flex {
            display: flex;
            align-items: flex-start;
            justify-content: flex-start;
            width: 100%;
        }
        .runtime-pie-chart-container {
            width: 220px;
            height: 220px;
            min-width: 450px;
            min-height: 450px;
            aspect-ratio: 1 / 1;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            margin-right: 24px;
        }
        .runtime-pie-chart-container canvas {
            width: 100% !important;
            height: 100% !important;
            aspect-ratio: 1 / 1;
            display: block;
        }
        @media (max-width: 600px) {
          .runtime-pie-chart-container {
            width: 150px;
            height: 150px;
            min-width: 150px;
            min-height: 150px;
          }
        }
        .pie-total-label {
            position: absolute;
            top: 0;
            left: 50%;
            transform: translate(-50%, -60%);
            font-size: 1.1rem;
            font-weight: bold;
            background: #fff;
            border-radius: 12px;
            padding: 2px 12px;
            box-shadow: 0 1px 4px rgba(0,0,0,0.04);
            z-index: 2;
            color: #222;
        }
        .runtime-pie-legend {
            min-width: 160px;
            font-size: 1rem;
            margin-top: 12px;
        }
        .runtime-pie-legend ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .runtime-pie-legend li {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        .runtime-pie-legend .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 10px;
        }
    </style>
    <script>
    // --- Tab switching logic ---
    function switchDeviceTabs() {
        const type = document.getElementById('deviceType').value;
        document.getElementById('motorTabs').style.display = (type === 'motor') ? '' : 'none';
        document.getElementById('valveTabs').style.display = (type === 'valve') ? '' : 'none';
        document.getElementById('damperTabs').style.display = (type === 'damper') ? '' : 'none';
        loadReports();
    }
    
    // Prevent auto-scroll on tab change
    document.addEventListener('DOMContentLoaded', function() {
        // Override Bootstrap tab behavior to prevent auto-scroll
        const tabButtons = document.querySelectorAll('[data-bs-toggle="tab"]');
        tabButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                const target = this.getAttribute('data-bs-target');
                const tab = new bootstrap.Tab(this);
                tab.show();
                
                // Prevent scroll to top
                setTimeout(() => {
                    window.scrollTo(0, window.scrollY);
                }, 10);
            });
        });
        
        // Additional prevention for Bootstrap's built-in scroll behavior
        const originalScrollIntoView = Element.prototype.scrollIntoView;
        Element.prototype.scrollIntoView = function(options) {
            if (options && options.behavior === 'smooth') {
                return; // Prevent smooth scrolling
            }
            return originalScrollIntoView.call(this, options);
        };
    });
    // --- Date preset logic ---
    function handleDatePreset() {
        const preset = document.getElementById('datePreset').value;
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        if (preset === 'custom') {
            startDateInput.value = '';
            endDateInput.value = '';
            return;
        }
        const today = new Date();
        let startDate, endDate;
        switch (preset) {
            case 'today': startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); break;
            case 'yesterday': startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1); break;
            case '2days': startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 2); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); break;
            case '3days': startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 3); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); break;
            case '1week': startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); break;
            case '2weeks': startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 14); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); break;
            case '1month': startDate = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate()); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); break;
            case '2months': startDate = new Date(today.getFullYear(), today.getMonth() - 2, today.getDate()); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); break;
            case '3months': startDate = new Date(today.getFullYear(), today.getMonth() - 3, today.getDate()); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); break;
            case '6months': startDate = new Date(today.getFullYear(), today.getMonth() - 6, today.getDate()); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); break;
            case '1year': startDate = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate()); endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); break;
        }
        startDateInput.value = startDate.toISOString().split('T')[0];
        endDateInput.value = endDate.toISOString().split('T')[0];
    }
    // --- Chart and summary logic ---
    let motorDailyChart, motorComparisonChart, valveDailyChart, valveComparisonChart, damperDailyChart, damperComparisonChart;
    let motorSummaryData = {}, valveSummaryData = {}, damperSummaryData = {}; // Store data for PDF export
    window.motorStatusPieChart = null;
    window.totalRuntimePieChart = null;

    async function loadReports() {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const groupBy = document.getElementById('groupBy').value;
        const deviceType = document.getElementById('deviceType').value;
        if (!startDate || !endDate) {
            alert('Please select start and end dates');
            return;
        }

        document.getElementById('exportPdfBtn').disabled = true; // Disable button during load

        if (deviceType === 'motor') {
            await loadMotorDaily(startDate, endDate, groupBy);
            await loadMotorComparison(startDate, endDate, groupBy);
            await loadMotorSummary(startDate, endDate, groupBy);
        } else if (deviceType === 'valve') {
            await loadValveDaily(startDate, endDate, groupBy);
            await loadValveComparison(startDate, endDate, groupBy);
            await loadValveSummary(startDate, endDate, groupBy);
        } else if (deviceType === 'damper') {
            await loadDamperDaily(startDate, endDate, groupBy);
            await loadDamperComparison(startDate, endDate, groupBy);
            await loadDamperSummary(startDate, endDate, groupBy);
        }
        
        document.getElementById('exportPdfBtn').disabled = false; // Enable button after loading
    }
    // --- Motor ---
    async function loadMotorDaily(startDate, endDate, groupBy) {
        const response = await fetch(`/reporting/api/motor-runtime/daily?startDate=${startDate}&endDate=${endDate}&groupBy=${groupBy}`);
        const data = await response.json();
        // console.log('Daily API Response:', JSON.stringify(data, null, 2));
        if (data.success) renderMotorDailyChart(data.data.dailyChart);
    }
    function renderMotorDailyChart(dailyData) {
        // console.log('Daily Chart Data:', dailyData);
        const ctx = document.getElementById('motorDailyChart').getContext('2d');
        if (motorDailyChart) motorDailyChart.destroy();
        const labels = dailyData.map(period => Object.keys(period).find(k => k !== 'motors'));
        // console.log('Daily Labels:', labels);
        const datasets = [];
        const motorNames = new Set();
        dailyData.forEach(period => { Object.keys(period.motors || {}).forEach(motorName => motorNames.add(motorName)); });
        // console.log('Motor Names:', Array.from(motorNames));
        const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'];
        let colorIndex = 0;
        motorNames.forEach(motorName => {
            const data = dailyData.map(period => period.motors && period.motors[motorName] ? period.motors[motorName].runtime / 3600 : 0);
            datasets.push({ label: motorName, data, backgroundColor: colors[colorIndex % colors.length], borderColor: colors[colorIndex % colors.length], borderWidth: 1 });
            colorIndex++;
        });
        // console.log('Daily Datasets:', datasets);
        motorDailyChart = new Chart(ctx, { type: 'bar', data: { labels, datasets }, options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, title: { display: true, text: 'Runtime (Hours)' } }, x: { title: { display: true, text: 'Date/Period' }, ticks: { maxRotation: 45, minRotation: 0 } } }, plugins: { title: { display: true, text: 'Motor Daily Runtime' }, legend: { position: 'top' } }, layout: { padding: { bottom: 20 } } } });
    }
    async function loadMotorComparison(startDate, endDate, groupBy) {
        const response = await fetch(`/reporting/api/motor-runtime/comparison?startDate=${startDate}&endDate=${endDate}&groupBy=${groupBy}`);
        const data = await response.json();
        // console.log('Comparison API Response:', JSON.stringify(data, null, 2));
        if (data.success) {
            renderMotorComparisonChart(data.data.motorComparison);
            updateMotorComparisonSummary(data.data.summary);
        }
    }
    function renderMotorComparisonChart(motorData) {
        // console.log('Comparison Chart Data:', motorData);
        const ctx = document.getElementById('motorComparisonChart').getContext('2d');
        if (motorComparisonChart) motorComparisonChart.destroy();
        const labels = motorData.map(motor => motor.motorName);
        const data = motorData.map(motor => motor.totalRuntime / 3600);
        // console.log('Comparison Labels:', labels);
        // console.log('Comparison Data:', data);
        const colors = motorData.map((motor, index) => ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'][index % 5]);
        motorComparisonChart = new Chart(ctx, { type: 'bar', data: { labels, datasets: [{ label: 'Total Runtime (Hours)', data, backgroundColor: colors, borderColor: colors, borderWidth: 1 }] }, options: { responsive: true, maintainAspectRatio: false, aspectRatio: 2, scales: { y: { beginAtZero: true, title: { display: true, text: 'Runtime (Hours)' } }, x: { title: { display: true, text: 'Motor Name' } } }, plugins: { title: { display: true, text: 'Motor Runtime Comparison' }, legend: { display: false } } } });
    }
    function updateMotorComparisonSummary(summary) {
        const el = document.getElementById('motorComparisonSummary');
        if (!el) return;
        el.innerHTML = `
            <div><b>Total Motors:</b> ${summary.totalMotors}</div>
            <div><b>Avg Efficiency:</b> ${summary.averageEfficiency}%</div>
            <div><b>Most Active:</b> ${summary.mostActiveMotor}</div>
            <div><b>Least Active:</b> ${summary.leastActiveMotor}</div>
        `;
    }
    async function loadMotorSummary(startDate, endDate, groupBy) {
        const response = await fetch(`/reporting/api/motor-runtime/summary?startDate=${startDate}&endDate=${endDate}&groupBy=${groupBy}`);
        const data = await response.json();
        if (data.success) {
            motorSummaryData = data.data; // Store for PDF
            updateMotorSummaryData(data.data);
        }
    }
    function updateMotorSummaryData(data) {
        document.getElementById('motorSummary').innerHTML = `
            <div><b>Start Date:</b> ${data.period.startDate}</div>
            <div><b>End Date:</b> ${data.period.endDate}</div>
            <div><b>Total Operating Hours:</b> ${data.overall.totalOperatingHours}h</div>
            <div><b>Overall Efficiency:</b> ${data.overall.overallEfficiency}%</div>
            <div><b>Average Daily Runtime:</b> ${data.overall.averageDailyRuntime}h</div>
        `;
    }
    // --- Valve ---
    async function loadValveDaily(startDate, endDate, groupBy) {
        const response = await fetch(`/reporting/api/valve-open-time/daily?startDate=${startDate}&endDate=${endDate}&groupBy=${groupBy}`);
        const data = await response.json();
        if (data.success) renderValveDailyChart(data.data.dailyChart);
    }
    function renderValveDailyChart(dailyData) {
        const ctx = document.getElementById('valveDailyChart').getContext('2d');
        if (valveDailyChart) valveDailyChart.destroy();
        const labels = dailyData.map(period => Object.keys(period).find(k => k !== 'valves'));
        const datasets = [];
        const valveNames = new Set();
        dailyData.forEach(period => { Object.keys(period.valves || {}).forEach(valveName => valveNames.add(valveName)); });
        const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'];
        let colorIndex = 0;
        valveNames.forEach(valveName => {
            const data = dailyData.map(period => period.valves && period.valves[valveName] ? period.valves[valveName].openHours : 0);
            datasets.push({ label: valveName, data, backgroundColor: colors[colorIndex % colors.length], borderColor: colors[colorIndex % colors.length], borderWidth: 1 });
            colorIndex++;
        });
        valveDailyChart = new Chart(ctx, { type: 'bar', data: { labels, datasets }, options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, title: { display: true, text: 'Open Time (Hours)' } }, x: { title: { display: true, text: 'Date/Period' }, ticks: { maxRotation: 45, minRotation: 0 } } }, plugins: { title: { display: true, text: 'Valve Daily Open Time' }, legend: { position: 'top' } }, layout: { padding: { bottom: 20 } } } });
    }
    async function loadValveComparison(startDate, endDate, groupBy) {
        const response = await fetch(`/reporting/api/valve-open-time/comparison?startDate=${startDate}&endDate=${endDate}&groupBy=${groupBy}`);
        const data = await response.json();
        if (data.success) {
            renderValveComparisonChart(data.data.valveComparison);
            updateValveComparisonSummary(data.data.summary);
        }
    }
    function renderValveComparisonChart(valveData) {
        const ctx = document.getElementById('valveComparisonChart').getContext('2d');
        if (valveComparisonChart) valveComparisonChart.destroy();
        const labels = valveData.map(valve => valve.valveName);
        const data = valveData.map(valve => valve.openHours);
        const colors = valveData.map((valve, index) => ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'][index % 5]);
        valveComparisonChart = new Chart(ctx, { type: 'bar', data: { labels, datasets: [{ label: 'Open Time (Hours)', data, backgroundColor: colors, borderColor: colors, borderWidth: 1 }] }, options: { responsive: true, maintainAspectRatio: false, aspectRatio: 2, scales: { y: { beginAtZero: true, title: { display: true, text: 'Open Time (Hours)' } }, x: { title: { display: true, text: 'Valve Name' } } }, plugins: { title: { display: true, text: 'Valve Open Time Comparison' }, legend: { display: false } } } });
    }
    function updateValveComparisonSummary(summary) {
        const el = document.getElementById('valveComparisonSummary');
        if (!el) return;
        el.innerHTML = `
            <div><b>Total Valves:</b> ${summary.totalValves}</div>
            <div><b>Group By:</b> ${summary.groupBy}</div>
        `;
    }
    async function loadValveSummary(startDate, endDate, groupBy) {
        const response = await fetch(`/reporting/api/valve-open-time/summary?startDate=${startDate}&endDate=${endDate}&groupBy=${groupBy}`);
        const data = await response.json();
        if (data.success) {
            valveSummaryData = data.data; // Store for PDF
            updateValveSummaryData(data.data);
        }
    }
    function updateValveSummaryData(data) {
        document.getElementById('valveSummary').innerHTML = `
            <div><b>Total Open Records:</b> ${data.totalOpenRecords}</div>
            <div><b>Total Records:</b> ${data.totalRecords}</div>
            <div><b>Open Hours:</b> ${parseFloat(data.openHours).toFixed(2)} h</div>
            <div><b>Efficiency:</b> ${data.efficiency}%</div>
        `;
    }
    // --- Damper ---
    async function loadDamperDaily(startDate, endDate, groupBy) {
        const response = await fetch(`/reporting/api/damper-open-time/daily?startDate=${startDate}&endDate=${endDate}&groupBy=${groupBy}`);
        const data = await response.json();
        if (data.success) renderDamperDailyChart(data.data.dailyChart);
    }
    function renderDamperDailyChart(dailyData) {
        const ctx = document.getElementById('damperDailyChart').getContext('2d');
        if (damperDailyChart) damperDailyChart.destroy();
        const labels = dailyData.map(period => Object.keys(period).find(k => k !== 'dampers'));
        const datasets = [];
        const damperNames = new Set();
        dailyData.forEach(period => { Object.keys(period.dampers || {}).forEach(damperName => damperNames.add(damperName)); });
        const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'];
        let colorIndex = 0;
        damperNames.forEach(damperName => {
            const data = dailyData.map(period => period.dampers && period.dampers[damperName] ? period.dampers[damperName].openHours : 0);
            datasets.push({ label: damperName, data, backgroundColor: colors[colorIndex % colors.length], borderColor: colors[colorIndex % colors.length], borderWidth: 1 });
            colorIndex++;
        });
        damperDailyChart = new Chart(ctx, { type: 'bar', data: { labels, datasets }, options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, title: { display: true, text: 'Open Time (Hours)' } }, x: { title: { display: true, text: 'Date/Period' }, ticks: { maxRotation: 45, minRotation: 0 } } }, plugins: { title: { display: true, text: 'Damper Daily Open Time' }, legend: { position: 'top' } }, layout: { padding: { bottom: 20 } } } });
    }
    async function loadDamperComparison(startDate, endDate, groupBy) {
        const response = await fetch(`/reporting/api/damper-open-time/comparison?startDate=${startDate}&endDate=${endDate}&groupBy=${groupBy}`);
        const data = await response.json();
        if (data.success) {
            renderDamperComparisonChart(data.data.damperComparison);
            updateDamperComparisonSummary(data.data.summary);
        }
    }
    function renderDamperComparisonChart(damperData) {
        const ctx = document.getElementById('damperComparisonChart').getContext('2d');
        if (damperComparisonChart) damperComparisonChart.destroy();
        const labels = damperData.map(damper => damper.damperName);
        const data = damperData.map(damper => damper.openHours);
        const colors = damperData.map((damper, index) => ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'][index % 5]);
        damperComparisonChart = new Chart(ctx, { type: 'bar', data: { labels, datasets: [{ label: 'Open Time (Hours)', data, backgroundColor: colors, borderColor: colors, borderWidth: 1 }] }, options: { responsive: true, maintainAspectRatio: false, aspectRatio: 2, scales: { y: { beginAtZero: true, title: { display: true, text: 'Open Time (Hours)' } }, x: { title: { display: true, text: 'Damper Name' } } }, plugins: { title: { display: true, text: 'Damper Open Time Comparison' }, legend: { display: false } } } });
    }
    function updateDamperComparisonSummary(summary) {
        const el = document.getElementById('damperComparisonSummary');
        if (!el) return;
        el.innerHTML = `
            <div><b>Total Dampers:</b> ${summary.totalDampers}</div>
            <div><b>Group By:</b> ${summary.groupBy}</div>
        `;
    }
    async function loadDamperSummary(startDate, endDate, groupBy) {
        const response = await fetch(`/reporting/api/damper-open-time/summary?startDate=${startDate}&endDate=${endDate}&groupBy=${groupBy}`);
        const data = await response.json();
        if (data.success) {
            damperSummaryData = data.data; // Store for PDF
            updateDamperSummaryData(data.data);
        }
    }
    function updateDamperSummaryData(data) {
        document.getElementById('damperSummary').innerHTML = `
            <div><b>Total Open Records:</b> ${data.totalOpenRecords}</div>
            <div><b>Total Records:</b> ${data.totalRecords}</div>
            <div><b>Open Hours:</b> ${parseFloat(data.openHours).toFixed(2)} h</div>
            <div><b>Efficiency:</b> ${data.efficiency}%</div>
        `;
    }
    let motorStatusPieChart, totalRuntimePieChart;
    async function loadMotorStatusPie() {
      const response = await fetch('/reporting/api/motor-status-ratio');
      const data = await response.json();
      if (!data.success) return;
      const ctx = document.getElementById('motorStatusPieChart').getContext('2d');
      if (window.motorStatusPieChart) window.motorStatusPieChart.destroy();
      const values = [data.data.running, data.data.stopped];
      // Tổng số
      const total = values.reduce((a, b) => a + b, 0);
      
      // Render legend thủ công
      const labels = ['Running', 'Stopped'];
      const colors = ['#36A2EB', '#FF6384'];
      let legendHtml = '<ul>';
      for (let i = 0; i < labels.length; i++) {
        legendHtml += `<li><span class="legend-color" style="background:${colors[i]}"></span> ${labels[i]}</li>`;
      }
      legendHtml += '</ul>';
      document.getElementById('motorStatusPieLegend').innerHTML = legendHtml;
      window.motorStatusPieChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: ['Running', 'Stopped'],
          datasets: [{
            data: values,
            backgroundColor: colors,
            borderWidth: 2,
            borderColor: '#fff'
          }]
        },
        options: {
          plugins: {
            title: {
              display: true,
              text: 'Current Motor Status Ratio',
              font: { size: 20, weight: 'bold' },
              align: 'center'
            },
            legend: { display: false },
            datalabels: {
              color: '#fff',
              font: { weight: 'bold', size: 16 },
              formatter: (value, context) => {
                const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                if (total === 0) return '';
                const percent = ((value / total) * 100).toFixed(1);
                return percent + '%';
              }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const value = context.parsed;
                  const percent = total ? ((value / total) * 100).toFixed(1) : 0;
                  return `${context.label}: ${percent}%`;
                }
              }
            }
          },
          cutout: '70%',
          responsive: true
        },
        plugins: [ChartDataLabels]
      });
    }
    async function loadTotalRuntimePie() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      const response = await fetch(`/reporting/api/total-runtime-ratio?startDate=${startDate}&endDate=${endDate}`);
      const data = await response.json();
      if (!data.success) return;
      const ctx = document.getElementById('totalRuntimePieChart').getContext('2d');
      if (window.totalRuntimePieChart) window.totalRuntimePieChart.destroy();
      const values = [data.data.motorRuntime, data.data.valveOpen, data.data.damperOpen];
      const labels = ['Motor', 'Valve', 'Damper'];
      // Tổng số
      const total = values.reduce((a, b) => a + b, 0);
      
      // Render legend thủ công
      const colors = ['#36A2EB', '#FFCE56', '#4BC0C0'];
      let legendHtml = '<ul>';
      for (let i = 0; i < labels.length; i++) {
        legendHtml += `<li><span class="legend-color" style="background:${colors[i]}"></span> ${labels[i]}</li>`;
      }
      legendHtml += '</ul>';
      document.getElementById('totalRuntimePieLegend').innerHTML = legendHtml;
      window.totalRuntimePieChart = new Chart(ctx, {
        type: 'pie',
        data: {
          labels,
          datasets: [{
            data: values,
            backgroundColor: colors,
            borderWidth: 2,
            borderColor: '#fff'
          }]
        },
        options: {
          plugins: {
            title: {
              display: true,
              text: 'Total Runtime Ratio by Device Group',
              font: { size: 20, weight: 'bold' },
              align: 'center'
            },
            legend: { display: false },
            datalabels: {
              color: '#fff',
              font: { weight: 'bold', size: 16 },
              formatter: (value, context) => {
                const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                if (total === 0) return '';
                const percent = ((value / total) * 100).toFixed(1);
                return percent + '%';
              }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const value = context.parsed;
                  const percent = total ? ((value / total) * 100).toFixed(1) : 0;
                  return `${context.label}: ${percent}%`;
                }
              }
            }
          },
          responsive: true,
          maintainAspectRatio: true,
          aspectRatio: 1
        },
        plugins: [ChartDataLabels]
      });
    }
    // Gọi khi loadReports hoặc khi đổi ngày
    async function loadPieCharts() {
      await loadMotorStatusPie();
      await loadTotalRuntimePie();
    }
    // Gọi pie chart khi loadReports
    const oldLoadReports = loadReports;
    loadReports = async function() {
      await oldLoadReports();
      await loadPieCharts();
    }
    // --- Auto init ---
    document.addEventListener('DOMContentLoaded', function() {
        const today = new Date();
        const lastWeek = new Date(today.getTime() - (7 * 24 * 60 * 60 * 1000));
        document.getElementById('endDate').value = today.toISOString().split('T')[0];
        document.getElementById('startDate').value = lastWeek.toISOString().split('T')[0];
        // Set default to last 7 days to see more data
        document.getElementById('datePreset').value = '1week';
        switchDeviceTabs();
    });

    document.getElementById('exportPdfBtn').addEventListener('click', async function() {
        this.disabled = true;
        this.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...`;

        const deviceType = document.getElementById('deviceType').value;
        let summary, charts = {};

        if (deviceType === 'motor') {
            summary = motorSummaryData;
            charts.motorDailyChart = motorDailyChart ? motorDailyChart.toBase64Image() : null;
            charts.motorComparisonChart = motorComparisonChart ? motorComparisonChart.toBase64Image() : null;
        } else if (deviceType === 'valve') {
            summary = valveSummaryData;
            charts.valveDailyChart = valveDailyChart ? valveDailyChart.toBase64Image() : null;
            charts.valveComparisonChart = valveComparisonChart ? valveComparisonChart.toBase64Image() : null;
        } else if (deviceType === 'damper') {
            summary = damperSummaryData;
            charts.damperDailyChart = damperDailyChart ? damperDailyChart.toBase64Image() : null;
            charts.damperComparisonChart = damperComparisonChart ? damperComparisonChart.toBase64Image() : null;
        }
        charts.motorStatusPieChart = window.motorStatusPieChart ? window.motorStatusPieChart.toBase64Image() : null;
        charts.totalRuntimePieChart = window.totalRuntimePieChart ? window.totalRuntimePieChart.toBase64Image() : null;
        // Add similar logic for valve and damper if their PDF templates are created
        // else if (deviceType === 'valve') { ... }

        try {
            const payload = {
                startDate: document.getElementById('startDate').value,
                endDate: document.getElementById('endDate').value,
                summary: summary,
                charts: charts
            };

            const response = await fetch('/reporting/api/export-pdf', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`PDF Export failed: ${await response.text()}`);
            }

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `HVAC_Report_${deviceType}_${new Date().toISOString().split('T')[0]}.pdf`;
            document.body.appendChild(a);
            a.click();
            a.remove();
            window.URL.revokeObjectURL(url);

        } catch (error) {
            console.error('PDF Export Error:', error);
            alert('Failed to export PDF. Please check the console for more details.');
        } finally {
            this.disabled = false;
            this.innerHTML = `<i class="bi bi-file-earmark-pdf-fill"></i> Export to PDF`;
        }
    });
    </script>
</body>
</html> 